SHELL SORT

OSNOVNE KARAKTERISTIKE:
 - Pripada klasi algoritama za sortiranje
 - Kao i većina ovih algoritama, zasnovan je na poređenjima i razmenama
 - Složenost : O(n2) -- za gap n, n/2, n/4, ..., 1
 - Složenost može biti i bolja, a zavisi od odabira gap-a: O(n2/3), O(n4/3), O(nlog2n),...

OPIS:
Najveći uzrok neefikasnosti kod insertion sort algoritma je slučaj malih elemenata koji se nalaze blizu kraja niza. Pošto se nalaze blizu kraja, oni se umeću u relativno dugačak niz, a pošto su mali umeću se na početak te je potrebno izvršiti pomeranje velikog broja elemenata kako bi se oni postavili na svoje mesto. Shell sort popravlja ovo. Osnovni cilj je da se ,,skrati put” ovakvih elemenata. Shell sort koristi činjenicu da insertion sort funkcioniše odlično kod
nizova koji su ,,skoro sortirani”. Algoritam radi tako što se niz deli na veći broj kratkih kolona koje se sortiraju primenom insertion sort algoritma, čime se omogućava direktna razmena udaljenih elemenata. Broj kolona se zatim smanjuje, sve dok se na kraju insertion sort ne primeni na ceo niz. Međutim, do tada su ,,pripremni koraci” deljenja na kolone doveli niz u ,,skoro sortirano” stanje te se završni korak prilično brzo odvija.
Napomenimo da je podela na kolone samo fiktivna operacija i da se ona u implementaciji izvodi tako što se prilikom umetanja elementa ne razmatraju susedni elementi već elementi na rastojanju gap gde gap označava tekući broj kolona. Obzirom da je u poslednjoj iteraciji spoljne petlje gap ima vrednost 1, algoritam u poslednjoj iteraciji izvodi običan insertion sort algoritam, te se korektnost Shell sort algoritma oslanja na već diskutovanu korektnost insertion sort algoritma i invarijante da je sve vreme (multi)skup elemenata niza nepromenjen (koja je trivijalno ispunjena jer se algoritam zasniva na razmenama). Ono što s se može proizvoljno odredivati je broj kolona na koji se vrši deljenje niza u fazama (broj kolona se obično označava sa gap i ovaj niz se u literaturi često označava gap sequence). Originalni Shellov predlog je n/2 , n/4 , . . . , n/2k , . . . , 1). Kako bi se garantovala korektnost, na kraju je potrebno primeniti insertion sort bez podele na kolone (tj. poslednji član sekvence mora biti 1). U zavisnosti od sekvence varira i složenost najgoreg slučaja. Originalna sekvenca ima složenost O(n2) dok postoje druge sekvence koje garantuju složenost zO(n3/2 ), O(n 4/3 ) pa i O(n log2 n). Napomenimo da je empirijski utvrdeno da postoje relativno nepravilne sekvence koje u praksi daju bolje rezultate (imaju najbolju složenost prosečnog slučaja).
